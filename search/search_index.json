{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Barbara's MkDocs include the resume information","title":"Home"},{"location":"#welcome-to-barbaras-mkdocs","text":"include the resume information","title":"Welcome to Barbara's MkDocs"},{"location":"APIs/","text":"Menus API Reference Material The Menus API contains the following endpoints: GET /menu Retrieving Menus The method GET /menu enables you to retrieve the collection of menus created by the authenticating ally. URL https://services.mxgrability.rappi.com/api/v2/restaurants-integrations-public-api/menu Path Parameters No path parameters exist for this endpoint. Query Parameters No query parameters exist for this endpoint Header Parameters No header parameters exist for this endpoint Body Parameters No body parameters exist for this endpoint. Sample Request The following is an example of an API request using this endpoint: $ curl -X GET --header 'Accept:application/json' --header 'Authorization: Bearer <access token>' 'https://microservices.dev.rappi.com/api/v2/restaurants-integrations-public-api/menu' Response Body The following table describes the elements included in the response body. Element Description Type storeId Identifier of the store in the Rappi application. string items Product list Array of object name Name of the product in the menu string description Description of the product in the menu string sku SKU that the ally assigned for the product in the menu string type Item type. In this case can be only PRODUCT string price Price of the product in the menu integer category Category of the product in the menu string id The SKU (Stock-Keeping Unit) the ally gives to this category string name Category name integer Sample Response Body The following is an example of a typical response, showing all of the elements of the ** alerts resource object. [ { \"storeId\": \"900111978\", \"items\": [ { \"name\": \"Naked Cake con frutos\", \"description\": \"Naked cake decorado con frutos. Cubierta de trufa derretida (ganache) y decorada con frutos del bosque.\", \"sku\": \"8569874\", \"type\": \"PRODUCT\", \"price\": 75.0, \"category\": { \"id\": \"3\", \"name\": \"Tortas\", \"minQty\": 0, \"maxQty\": 0, \"sortingPosition\": 0 }, \"imageUrl\": \"https://image.com/image1.jpg\", \"children\": [ { \"name\": \"Chocolate\", \"description\": \"\", \"sku\": \"8569874-159\", \"type\": \"TOPPING\", \"price\": 0.0, \"category\": { \"id\": \"1\", \"name\": \"Sabor\", \"minQty\": 0, \"maxQty\": 1, \"sortingPosition\": 0 }, \"imageUrl\": \"https://image.com/image10.jpg\", \"children\": [], \"rappiIds\": [\"340948822\"], \"sortingPosition\": 1, \"maxLimit\": 1 } ], \"rappiIds\": [\"2135527868\"], \"sortingPosition\": 0, \"maxLimit\": 1 }, { \"name\": \"Snowman\", \"description\": \"Linda lata de Snowman con productos variadosIncluye:Galletas mantequilla 350 gr, 6 brookies y 4 trufas de brownie.\", \"sku\": \"856887\", \"type\": \"PRODUCT\", \"price\": 75.0, \"category\": { \"id\": \"9\", \"name\": \"Navidad\", \"minQty\": 0, \"maxQty\": 0, \"sortingPosition\": 0 }, \"imageUrl\": \"https://image.com/image2.jpg\", \"children\": [], \"rappiIds\": [\"2135524472\"], \"sortingPosition\": 0, \"maxLimit\": 1 } ] } ] Code Samples The following is an example (TBD) URL url = new URL(\"https://microservices.dev.rappi.com/api/v2/restaurants-integrations-public-api/menu\"); HttpURLConnection connection = (HttpURLConnection) url.openConnection(); connection.setRequestMethod(\"GET\"); connection.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\"); connection.setRequestProperty(\"Content-Type\", \"application/json\"); connection.setRequestProperty(\"Accept\", \"application/json\"); connection.setRequestProperty(\"x-authorization\", \"bearer YOUR_TOKEN\"); try (BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream(), StandardCharsets.UTF_8))) { StringBuilder response = new StringBuilder(); String responseLine; while ((responseLine = br.readLine()) != null) { response.append(responseLine.trim()); } System.out.println(\"Response body: \" + response.toString()); } System.out.println(\"Response Code : \" + connection.getResponseCode()); Status and Error Codes The following table contains the status codes of the response for this endpoint: Code Description 200 Success 401 Invalid Credentials Orders API Reference Material The Orders API contains the following endpoints: ** PUT /orders Retrieving Orders Use this endpoint to take an order, so the store commences preparing it. URL https://services.mxgrability.rappi.com/api/v2/restaurants-integrations-public-api/orders/{orderId}/take/{cookingTime} Path Parameters This resource has the following properties: esponse formats: JSONR Authentication requirements: Token PARAMETERS This endpoint does not permit additional parameters. Query Parameters No query parameters exist for this endpoint Header Parameters Parameter Description Type Required/Optional Notes Accept Specifies the developer\u2019s access token. string Required Bearer <access_token> The Authorization Procedure documents how to get an access token. Authorization Acc --header \u2018Accept:application/json\u2019 --header \u2018Authorization: Bearer <access token>\u2019 Body Parameters No body parameters exist for this endpoint. Sample Request The following is an example of an API request using this endpoint: $ curl -X PUT --header 'Accept:application/json' --header 'Authorization: Bearer <access token>' 'https://microservices.dev.rappi.com/api/v2/restaurants-integrations-public-api/orders/392625/take/20' Response Body The following table describes the elements included in the response body. Element Description Type storeId Identifier of the store in the Rappi application. string items Product list Array of object name Name of the product in the menu string description Description of the product in the menu string sku SKU that the ally assigned for the product in the menu string type Item type. In this case can be only PRODUCT string price Price of the product in the menu integer category Category of the product in the menu string id The SKU (Stock-Keeping Unit) the ally gives to this category string name Category name integer Sample Response Body The following is an example of a typical response, showing all of the elements of the ** alerts resource object. [ { \"storeId\": \"900111978\", \"items\": [ { \"name\": \"Naked Cake con frutos\", \"description\": \"Naked cake decorado con frutos. Cubierta de trufa derretida (ganache) y decorada con frutos del bosque.\", \"sku\": \"8569874\", \"type\": \"PRODUCT\", \"price\": 75.0, \"category\": { \"id\": \"3\", \"name\": \"Tortas\", \"minQty\": 0, \"maxQty\": 0, \"sortingPosition\": 0 }, \"imageUrl\": \"https://image.com/image1.jpg\", \"children\": [ { \"name\": \"Chocolate\", \"description\": \"\", \"sku\": \"8569874-159\", \"type\": \"TOPPING\", \"price\": 0.0, \"category\": { \"id\": \"1\", \"name\": \"Sabor\", \"minQty\": 0, \"maxQty\": 1, \"sortingPosition\": 0 }, \"imageUrl\": \"https://image.com/image10.jpg\", \"children\": [], \"rappiIds\": [\"340948822\"], \"sortingPosition\": 1, \"maxLimit\": 1 } ], \"rappiIds\": [\"2135527868\"], \"sortingPosition\": 0, \"maxLimit\": 1 }, { \"name\": \"Snowman\", \"description\": \"Linda lata de Snowman con productos variadosIncluye:Galletas mantequilla 350 gr, 6 brookies y 4 trufas de brownie.\", \"sku\": \"856887\", \"type\": \"PRODUCT\", \"price\": 75.0, \"category\": { \"id\": \"9\", \"name\": \"Navidad\", \"minQty\": 0, \"maxQty\": 0, \"sortingPosition\": 0 }, \"imageUrl\": \"https://image.com/image2.jpg\", \"children\": [], \"rappiIds\": [\"2135524472\"], \"sortingPosition\": 0, \"maxLimit\": 1 } ] } ] Code Samples The following is an example (TBD) URL url = new URL(\"https://microservices.dev.rappi.com/api/v2/restaurants-integrations-public-api/menu\"); HttpURLConnection connection = (HttpURLConnection) url.openConnection(); connection.setRequestMethod(\"GET\"); connection.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\"); connection.setRequestProperty(\"Content-Type\", \"application/json\"); connection.setRequestProperty(\"Accept\", \"application/json\"); connection.setRequestProperty(\"x-authorization\", \"bearer YOUR_TOKEN\"); try (BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream(), StandardCharsets.UTF_8))) { StringBuilder response = new StringBuilder(); String responseLine; while ((responseLine = br.readLine()) != null) { response.append(responseLine.trim()); } System.out.println(\"Response body: \" + response.toString()); } System.out.println(\"Response Code : \" + connection.getResponseCode()); Status and Error Codes The following table contains the status codes of the response for this endpoint: Code Description 200 Order successfully taken 400 Invalid state transition 401 Invalid credentials 404 Order not found Jokes Paid Search for Joke Search for jokes with key word You can search for jokes with a given keyword. To get a joke with the term knock knock in it add a parameter \"query=knock knock\" to the call and it will return a random joke with pattern \"knock knock\" in it. Path Parameters No path parameters exist for this endpoint. Query Parameters There is a query parameter in this endpoint Header Parameters No header parameters exist for this endpoint Body Parameters No body parameters exist for this endpoint. Sample Request The following is an example of an API request using this endpoint: $ curl -X PUT --header 'Accept:application/json' --header 'content-type:application/jason' --header 'X-JokesOne-Api-Secret: api_key' \"https://api.jokes.one/joke/search?query=knock-knock\" Response query Parameter Description Type Required/Optional Notes success Specifies the success of finding a joke string Required total It show the total ok jokes contents jokes list title The name of the joke string lenght Number of characters string clean Indicate if the joke is clean, if the whole family can read it string racial Indicate if the joke have some content racial string id Specifies the id of the joke string text string copyright string Sample Response Body The following is an example of joke you GET { \"success\": { \"total\": 1 }, \"contents\": { \"jokes\": [ { \"title\": \"Useless Elephant\", \"length\": \"64\", \"clean\": \"0\", \"racial\": \"0\", \"id\": \"2cT1g9kqoeCO9FqhRnHObgeF\", \"text\": \"What do you call an elephant that doesn't matter? An irrelephant\" } ], \"copyright\": \"2019-20 https://jokes.one\" } }","title":"APIs sample"},{"location":"APIs/#menus-api-reference-material","text":"The Menus API contains the following endpoints: GET /menu","title":"Menus API Reference Material"},{"location":"APIs/#retrieving-menus","text":"The method GET /menu enables you to retrieve the collection of menus created by the authenticating ally.","title":"Retrieving Menus"},{"location":"APIs/#url","text":"https://services.mxgrability.rappi.com/api/v2/restaurants-integrations-public-api/menu","title":"URL"},{"location":"APIs/#path-parameters","text":"No path parameters exist for this endpoint.","title":"Path Parameters"},{"location":"APIs/#query-parameters","text":"No query parameters exist for this endpoint","title":"Query Parameters"},{"location":"APIs/#header-parameters","text":"No header parameters exist for this endpoint","title":"Header Parameters"},{"location":"APIs/#body-parameters","text":"No body parameters exist for this endpoint.","title":"Body Parameters"},{"location":"APIs/#sample-request","text":"The following is an example of an API request using this endpoint: $ curl -X GET --header 'Accept:application/json' --header 'Authorization: Bearer <access token>' 'https://microservices.dev.rappi.com/api/v2/restaurants-integrations-public-api/menu'","title":"Sample Request"},{"location":"APIs/#response-body","text":"The following table describes the elements included in the response body. Element Description Type storeId Identifier of the store in the Rappi application. string items Product list Array of object name Name of the product in the menu string description Description of the product in the menu string sku SKU that the ally assigned for the product in the menu string type Item type. In this case can be only PRODUCT string price Price of the product in the menu integer category Category of the product in the menu string id The SKU (Stock-Keeping Unit) the ally gives to this category string name Category name integer","title":"Response Body"},{"location":"APIs/#sample-response-body","text":"The following is an example of a typical response, showing all of the elements of the ** alerts resource object. [ { \"storeId\": \"900111978\", \"items\": [ { \"name\": \"Naked Cake con frutos\", \"description\": \"Naked cake decorado con frutos. Cubierta de trufa derretida (ganache) y decorada con frutos del bosque.\", \"sku\": \"8569874\", \"type\": \"PRODUCT\", \"price\": 75.0, \"category\": { \"id\": \"3\", \"name\": \"Tortas\", \"minQty\": 0, \"maxQty\": 0, \"sortingPosition\": 0 }, \"imageUrl\": \"https://image.com/image1.jpg\", \"children\": [ { \"name\": \"Chocolate\", \"description\": \"\", \"sku\": \"8569874-159\", \"type\": \"TOPPING\", \"price\": 0.0, \"category\": { \"id\": \"1\", \"name\": \"Sabor\", \"minQty\": 0, \"maxQty\": 1, \"sortingPosition\": 0 }, \"imageUrl\": \"https://image.com/image10.jpg\", \"children\": [], \"rappiIds\": [\"340948822\"], \"sortingPosition\": 1, \"maxLimit\": 1 } ], \"rappiIds\": [\"2135527868\"], \"sortingPosition\": 0, \"maxLimit\": 1 }, { \"name\": \"Snowman\", \"description\": \"Linda lata de Snowman con productos variadosIncluye:Galletas mantequilla 350 gr, 6 brookies y 4 trufas de brownie.\", \"sku\": \"856887\", \"type\": \"PRODUCT\", \"price\": 75.0, \"category\": { \"id\": \"9\", \"name\": \"Navidad\", \"minQty\": 0, \"maxQty\": 0, \"sortingPosition\": 0 }, \"imageUrl\": \"https://image.com/image2.jpg\", \"children\": [], \"rappiIds\": [\"2135524472\"], \"sortingPosition\": 0, \"maxLimit\": 1 } ] } ]","title":"Sample Response Body"},{"location":"APIs/#code-samples","text":"The following is an example (TBD) URL url = new URL(\"https://microservices.dev.rappi.com/api/v2/restaurants-integrations-public-api/menu\"); HttpURLConnection connection = (HttpURLConnection) url.openConnection(); connection.setRequestMethod(\"GET\"); connection.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\"); connection.setRequestProperty(\"Content-Type\", \"application/json\"); connection.setRequestProperty(\"Accept\", \"application/json\"); connection.setRequestProperty(\"x-authorization\", \"bearer YOUR_TOKEN\"); try (BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream(), StandardCharsets.UTF_8))) { StringBuilder response = new StringBuilder(); String responseLine; while ((responseLine = br.readLine()) != null) { response.append(responseLine.trim()); } System.out.println(\"Response body: \" + response.toString()); } System.out.println(\"Response Code : \" + connection.getResponseCode());","title":"Code Samples"},{"location":"APIs/#status-and-error-codes","text":"The following table contains the status codes of the response for this endpoint: Code Description 200 Success 401 Invalid Credentials","title":"Status and Error Codes"},{"location":"APIs/#orders-api-reference-material","text":"The Orders API contains the following endpoints: ** PUT /orders","title":"Orders API Reference Material"},{"location":"APIs/#retrieving-orders","text":"Use this endpoint to take an order, so the store commences preparing it.","title":"Retrieving Orders"},{"location":"APIs/#url_1","text":"https://services.mxgrability.rappi.com/api/v2/restaurants-integrations-public-api/orders/{orderId}/take/{cookingTime}","title":"URL"},{"location":"APIs/#path-parameters_1","text":"This resource has the following properties: esponse formats: JSONR Authentication requirements: Token PARAMETERS This endpoint does not permit additional parameters.","title":"Path Parameters"},{"location":"APIs/#query-parameters_1","text":"No query parameters exist for this endpoint","title":"Query Parameters"},{"location":"APIs/#header-parameters_1","text":"Parameter Description Type Required/Optional Notes Accept Specifies the developer\u2019s access token. string Required Bearer <access_token> The Authorization Procedure documents how to get an access token. Authorization Acc --header \u2018Accept:application/json\u2019 --header \u2018Authorization: Bearer <access token>\u2019","title":"Header Parameters"},{"location":"APIs/#body-parameters_1","text":"No body parameters exist for this endpoint.","title":"Body Parameters"},{"location":"APIs/#sample-request_1","text":"The following is an example of an API request using this endpoint: $ curl -X PUT --header 'Accept:application/json' --header 'Authorization: Bearer <access token>' 'https://microservices.dev.rappi.com/api/v2/restaurants-integrations-public-api/orders/392625/take/20'","title":"Sample Request"},{"location":"APIs/#response-body_1","text":"The following table describes the elements included in the response body. Element Description Type storeId Identifier of the store in the Rappi application. string items Product list Array of object name Name of the product in the menu string description Description of the product in the menu string sku SKU that the ally assigned for the product in the menu string type Item type. In this case can be only PRODUCT string price Price of the product in the menu integer category Category of the product in the menu string id The SKU (Stock-Keeping Unit) the ally gives to this category string name Category name integer","title":"Response Body"},{"location":"APIs/#sample-response-body_1","text":"The following is an example of a typical response, showing all of the elements of the ** alerts resource object. [ { \"storeId\": \"900111978\", \"items\": [ { \"name\": \"Naked Cake con frutos\", \"description\": \"Naked cake decorado con frutos. Cubierta de trufa derretida (ganache) y decorada con frutos del bosque.\", \"sku\": \"8569874\", \"type\": \"PRODUCT\", \"price\": 75.0, \"category\": { \"id\": \"3\", \"name\": \"Tortas\", \"minQty\": 0, \"maxQty\": 0, \"sortingPosition\": 0 }, \"imageUrl\": \"https://image.com/image1.jpg\", \"children\": [ { \"name\": \"Chocolate\", \"description\": \"\", \"sku\": \"8569874-159\", \"type\": \"TOPPING\", \"price\": 0.0, \"category\": { \"id\": \"1\", \"name\": \"Sabor\", \"minQty\": 0, \"maxQty\": 1, \"sortingPosition\": 0 }, \"imageUrl\": \"https://image.com/image10.jpg\", \"children\": [], \"rappiIds\": [\"340948822\"], \"sortingPosition\": 1, \"maxLimit\": 1 } ], \"rappiIds\": [\"2135527868\"], \"sortingPosition\": 0, \"maxLimit\": 1 }, { \"name\": \"Snowman\", \"description\": \"Linda lata de Snowman con productos variadosIncluye:Galletas mantequilla 350 gr, 6 brookies y 4 trufas de brownie.\", \"sku\": \"856887\", \"type\": \"PRODUCT\", \"price\": 75.0, \"category\": { \"id\": \"9\", \"name\": \"Navidad\", \"minQty\": 0, \"maxQty\": 0, \"sortingPosition\": 0 }, \"imageUrl\": \"https://image.com/image2.jpg\", \"children\": [], \"rappiIds\": [\"2135524472\"], \"sortingPosition\": 0, \"maxLimit\": 1 } ] } ]","title":"Sample Response Body"},{"location":"APIs/#code-samples_1","text":"The following is an example (TBD) URL url = new URL(\"https://microservices.dev.rappi.com/api/v2/restaurants-integrations-public-api/menu\"); HttpURLConnection connection = (HttpURLConnection) url.openConnection(); connection.setRequestMethod(\"GET\"); connection.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\"); connection.setRequestProperty(\"Content-Type\", \"application/json\"); connection.setRequestProperty(\"Accept\", \"application/json\"); connection.setRequestProperty(\"x-authorization\", \"bearer YOUR_TOKEN\"); try (BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream(), StandardCharsets.UTF_8))) { StringBuilder response = new StringBuilder(); String responseLine; while ((responseLine = br.readLine()) != null) { response.append(responseLine.trim()); } System.out.println(\"Response body: \" + response.toString()); } System.out.println(\"Response Code : \" + connection.getResponseCode());","title":"Code Samples"},{"location":"APIs/#status-and-error-codes_1","text":"The following table contains the status codes of the response for this endpoint: Code Description 200 Order successfully taken 400 Invalid state transition 401 Invalid credentials 404 Order not found","title":"Status and Error Codes"},{"location":"APIs/#jokes-paid","text":"","title":"Jokes Paid"},{"location":"APIs/#search-for-joke","text":"","title":"Search for Joke"},{"location":"APIs/#search-for-jokes-with-key-word","text":"You can search for jokes with a given keyword. To get a joke with the term knock knock in it add a parameter \"query=knock knock\" to the call and it will return a random joke with pattern \"knock knock\" in it.","title":"Search for jokes with key word"},{"location":"APIs/#path-parameters_2","text":"No path parameters exist for this endpoint.","title":"Path Parameters"},{"location":"APIs/#query-parameters_2","text":"There is a query parameter in this endpoint","title":"Query Parameters"},{"location":"APIs/#header-parameters_2","text":"No header parameters exist for this endpoint","title":"Header Parameters"},{"location":"APIs/#body-parameters_2","text":"No body parameters exist for this endpoint.","title":"Body Parameters"},{"location":"APIs/#sample-request_2","text":"The following is an example of an API request using this endpoint: $ curl -X PUT --header 'Accept:application/json' --header 'content-type:application/jason' --header 'X-JokesOne-Api-Secret: api_key' \"https://api.jokes.one/joke/search?query=knock-knock\"","title":"Sample Request"},{"location":"APIs/#response-query","text":"Parameter Description Type Required/Optional Notes success Specifies the success of finding a joke string Required total It show the total ok jokes contents jokes list title The name of the joke string lenght Number of characters string clean Indicate if the joke is clean, if the whole family can read it string racial Indicate if the joke have some content racial string id Specifies the id of the joke string text string copyright string","title":"Response query"},{"location":"APIs/#sample-response-body_2","text":"The following is an example of joke you GET { \"success\": { \"total\": 1 }, \"contents\": { \"jokes\": [ { \"title\": \"Useless Elephant\", \"length\": \"64\", \"clean\": \"0\", \"racial\": \"0\", \"id\": \"2cT1g9kqoeCO9FqhRnHObgeF\", \"text\": \"What do you call an elephant that doesn't matter? An irrelephant\" } ], \"copyright\": \"2019-20 https://jokes.one\" } }","title":"Sample Response Body"},{"location":"Architecture_guide/","text":"Activity - Documenting a Software Architecture Complete the missing descriptions (text in blue) of the Documenting a Software Architecture document using the architecture displayed below. Focus on the Overview , End User , Frontend , and Database sections. Time 20 min. Overview This guide provides a high-level description of the Youtube software architecture. The description explains how the architecture works and the elements, properties, and relationships that it contains. The YouTube application is a cloud-based platform that includes the following main components: End User Frontend Backend Database This structure facilitates the data flow from the database to the end user and back. In the next section you can find detailed information about how these elements interact. Diagram The following diagram illustrates the high-level architecture of the YouTube application: Figure 1. High-Level Architecture of the YouTube Application The Youtube architecture comprises the following elements, properties, and relationships: End User {#id1} In the Youtube application, the User comprises the following properties and relationships: Properties : Enters www.youtube.com to watch a video. Relationships : It has a bidirectional relationship with the Frontend. The user sends a request and receives content through the Web Browser. \\ Frontend In the youtube application, comprises the following properties and relationships: Properties : It renders static and dynamic content in the Web Browser Relationships : It has bidirectional relationships with the End User and with the Backend. With the End User, the Frontend receives requests of a specific video and sends dynamic and static content as a response. With the Backend, the Frontend sends video requests and receives dynamic and static content as a response to display at the Web Browser. \\ Backend In the Youtube application, the Backend comprises the following properties and relationships: Properties : It handles video requests and pulls such content from the Database. Relationships : It has bidirectional relationships with the Frontend and with the Database. With the Frontend, the Backend receives requests and sends dynamic and static content as a response. With the Database, the Backend sends requests and receives dynamic and static content as a response. Database In the Youtube application, the Database comprises the following properties and relationships: Properties : It contains static and dynamic content such as videos, titles, and user names. Relationships : It has a bidirectional relationship with the Backend. With the Backend, the Database receives video requests, and sends back the dynamic and static content. Plagiarism Detection Architecture Diagram Users In the Plagiarism Detection Architecture Diagram, the Users have the following properties and relationships: Properties : Send the documents to detect plagiarism. Relationship : The Users send documents toAmazon Simple Storage Service (Amazon S3) to run plagiarism detection on them. AWS Cloud In the Plagiarism Detection Architecture Diagram, the AWS Cloud comprises the following elements, properties, and relationships: Amazon S3 : Cloud storage to place the documents that the user sent. Properties : Amazon S3 event triggers start of AWS Step Functions workflow. Relationship : It has a one direction relationship with the user, and a bidirectional relationship with the AWS Lambda. Amazon EventBridge : Communicates the results of the plagiarism detection to the Users. Properties : Based on the configured similarity threshold that is compared against the OpenSearch Service query result score, an event bridge event is raised, specifying source document information that has possibly been plagiarized with reference to relevant works. Relationship : It has a directional relationship with the last AWS Lambda executed. AWS steps functions workflow In the Plagiarism Detection Architecture Diagram, the AWS steps Functions Workflow comprises the following properties and relationships: AWS Lambda Properties : AWS Lambda function extracts text from document using Tika (a content analysis toolkit that detects and extracts metadata and text from over a thousand different file types. Relationship : It has a bidirectional relationship with Amazon S3 and Amazon SageMaker, and a directional relationship to others AWS Lambda through the procedure. VCP In the Plagiarism Detection Architecture Diagram, the VCP comprises the following properties and relationships: Amazon OpenSearch Service Properties : Amazon OpenSearch Service (OpenSearch Service) domain stores an index of pre-processed works that have been converted into word embedding vectors and indexed. Relationship : It has a directional relationship that came from one of the AWS Lambda functions.","title":"Architecture guide"},{"location":"Architecture_guide/#activity-documenting-a-software-architecture","text":"Complete the missing descriptions (text in blue) of the Documenting a Software Architecture document using the architecture displayed below. Focus on the Overview , End User , Frontend , and Database sections. Time 20 min.","title":"Activity  - Documenting a Software Architecture"},{"location":"Architecture_guide/#overview","text":"This guide provides a high-level description of the Youtube software architecture. The description explains how the architecture works and the elements, properties, and relationships that it contains. The YouTube application is a cloud-based platform that includes the following main components: End User Frontend Backend Database This structure facilitates the data flow from the database to the end user and back. In the next section you can find detailed information about how these elements interact.","title":"Overview"},{"location":"Architecture_guide/#diagram","text":"The following diagram illustrates the high-level architecture of the YouTube application: Figure 1. High-Level Architecture of the YouTube Application The Youtube architecture comprises the following elements, properties, and relationships:","title":"Diagram"},{"location":"Architecture_guide/#end-user-id1","text":"In the Youtube application, the User comprises the following properties and relationships: Properties : Enters www.youtube.com to watch a video. Relationships : It has a bidirectional relationship with the Frontend. The user sends a request and receives content through the Web Browser. \\","title":"End User {#id1}"},{"location":"Architecture_guide/#frontend","text":"In the youtube application, comprises the following properties and relationships: Properties : It renders static and dynamic content in the Web Browser Relationships : It has bidirectional relationships with the End User and with the Backend. With the End User, the Frontend receives requests of a specific video and sends dynamic and static content as a response. With the Backend, the Frontend sends video requests and receives dynamic and static content as a response to display at the Web Browser. \\","title":"Frontend"},{"location":"Architecture_guide/#backend","text":"In the Youtube application, the Backend comprises the following properties and relationships: Properties : It handles video requests and pulls such content from the Database. Relationships : It has bidirectional relationships with the Frontend and with the Database. With the Frontend, the Backend receives requests and sends dynamic and static content as a response. With the Database, the Backend sends requests and receives dynamic and static content as a response.","title":"Backend"},{"location":"Architecture_guide/#database","text":"In the Youtube application, the Database comprises the following properties and relationships: Properties : It contains static and dynamic content such as videos, titles, and user names. Relationships : It has a bidirectional relationship with the Backend. With the Backend, the Database receives video requests, and sends back the dynamic and static content.","title":"Database"},{"location":"Architecture_guide/#plagiarism-detection-architecture-diagram","text":"","title":"Plagiarism Detection Architecture Diagram"},{"location":"Architecture_guide/#users","text":"In the Plagiarism Detection Architecture Diagram, the Users have the following properties and relationships: Properties : Send the documents to detect plagiarism. Relationship : The Users send documents toAmazon Simple Storage Service (Amazon S3) to run plagiarism detection on them.","title":"Users"},{"location":"Architecture_guide/#aws-cloud","text":"In the Plagiarism Detection Architecture Diagram, the AWS Cloud comprises the following elements, properties, and relationships: Amazon S3 : Cloud storage to place the documents that the user sent. Properties : Amazon S3 event triggers start of AWS Step Functions workflow. Relationship : It has a one direction relationship with the user, and a bidirectional relationship with the AWS Lambda. Amazon EventBridge : Communicates the results of the plagiarism detection to the Users. Properties : Based on the configured similarity threshold that is compared against the OpenSearch Service query result score, an event bridge event is raised, specifying source document information that has possibly been plagiarized with reference to relevant works. Relationship : It has a directional relationship with the last AWS Lambda executed.","title":"AWS Cloud"},{"location":"Architecture_guide/#aws-steps-functions-workflow","text":"In the Plagiarism Detection Architecture Diagram, the AWS steps Functions Workflow comprises the following properties and relationships:","title":"AWS steps functions workflow"},{"location":"Architecture_guide/#aws-lambda","text":"Properties : AWS Lambda function extracts text from document using Tika (a content analysis toolkit that detects and extracts metadata and text from over a thousand different file types. Relationship : It has a bidirectional relationship with Amazon S3 and Amazon SageMaker, and a directional relationship to others AWS Lambda through the procedure.","title":"AWS Lambda"},{"location":"Architecture_guide/#vcp","text":"In the Plagiarism Detection Architecture Diagram, the VCP comprises the following properties and relationships:","title":"VCP"},{"location":"Architecture_guide/#amazon-opensearch-service","text":"Properties : Amazon OpenSearch Service (OpenSearch Service) domain stores an index of pre-processed works that have been converted into word embedding vectors and indexed. Relationship : It has a directional relationship that came from one of the AWS Lambda functions.","title":"Amazon OpenSearch Service"}]}